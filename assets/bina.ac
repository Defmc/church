:load assets/list.ac
:load assets/combs.ac

# "Caches" an expression
Let = ^f.(^a.(f a))

# Numbers should be build like lists of `True` and `False` with a `Nil` at the end
# I.e, 10110 (or 22) == [True, False, True, True, False]
# But, they will be implemented in big endianness (aka from left to right instead of right to left)
Bum = Cons

HeadOrFalse = ^a.(If (IsNil a) False (Head a))
TailOrNil = ^a.(If (IsNil a) Nil (Tail a))

biAdd = ^a.(^b.(^c.(
    If (And (IsNil a) (IsNil b))
        (If c (Cons True Nil) Nil)
        (Cons
            (Xor (Xor (HeadOrFalse a) (HeadOrFalse b)) c)
            (biAdd
                (TailOrNil a) (TailOrNil b)
                (Or 
                    (And (HeadOrFalse a) (HeadOrFalse b))
                    (And (Xor (HeadOrFalse a) (HeadOrFalse b)) c)
                )
            )
        )
    )))

biSub = ^a.(^b.(^c.(
    If (And (IsNil a) (IsNil b))
        (If c False Nil)
        (Cons
            (Xor (Xor (HeadOrFalse a) (HeadOrFalse b)) c)
            (biSub
                (TailOrNil a)
                (TailOrNil b)
                (Or
                    (Or
                        (And (Not (HeadOrFalse a)) c)
                        (And (Not (HeadOrFalse a)) (HeadOrFalse b))
                    )
                    (And (HeadOrFalse b) c)
                )
            )
        )
    )))

biShiftrOne = ^l.(Cons False l)
biShiftlOne = TailOrNil

biIsZero = All ^c.(Not c)

bShiftr = ^l.(^n.(
    If (biIsZero l)
        l
        (Cons False (bShiftr l (bSub n True)))
    ))

bShiftl = ^l.(^n.(
    If (biIsZero l)
        l
        (TailOrNil (bShiftl l (bSub n True)))
    ))

# Cmp = Eq | Lt | Gt
Eq = ^a.(^b.(^c.(a)))
Lt = ^a.(^b.(^c.(b)))
Gt = ^a.(^b.(^c.(c)))

biIsEq = ^c.(c True False False)
# {} cmp {} == Eq
# True, ... cmp False, ... == Gt
# False, ... cmp True, ... == Lt
# otherwise cmp ... ...
bCmp = ^a.(^b.(
    If (And (IsNil a) (IsNil b))
        (Eq)
        (If (And
            (And
                (biIsEq (bCmp (TailOrNil a) (TailOrNil b)))
                (HeadOrFalse a)
            )
            (Not (HeadOrFalse b)))
            Gt
            (If (And
                (And
                    (biIsEq (bCmp (TailOrNil a) (TailOrNil b)))
                    (HeadOrFalse b)
                )
                (Not (HeadOrFalse a)))
                Lt
                (bCmp (TailOrNil a) (TailOrNil b))
    ))))


# ==
bEq = ^a.(^b.(bCmp a b True False False))

# !=
bNeq = ^a.(^b.(bCmp a b False True True))

# <
bLt = ^a.(^b.(bCmp a b False True False))

# >
bGt = ^a.(^b.(bCmp a b False False True))

# <=
bLeq = ^a.(^b.(bCmp a b True True False))

# >=
bGeq = ^a.(^b.(bCmp a b True True False))

bAdd = ^a.(^b.(biAdd a b False))
bSub = ^a.(^b.(biSub a b False))
