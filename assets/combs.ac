Y = ^f.(^x.(f (x x)) ^x.(f (x x))) # recursive combinator: Y f = Y (f (f (f (...))))
I = ^x.(x) # identity function: I x = x
True = ^a.(^b.(a))
False = ^a.(^b.(b))
If = I # (if c, then i, else e) == c
And = ^a.(^b.(a b a)) 
Or = ^a.(^b.(a a b))
Not = ^a.(a False True)
Xor = ^a.(^b.(a (Not b) b))
Xnor = ^a.(^b.(a b (Not b)))
