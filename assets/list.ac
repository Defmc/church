import "assets/combs.ac";

# Pairs: (x, y)
Pair = ^x.(^y.(^z.(z x y)));
Fst = ^z.(z True);
Snd = ^z.(z False);
MapPair = ^f.(^m.(Pair (f (Fst m)) (f (Snd m))));

# Lists: [x, y, z]
Cons = Pair;
Nil = ^x.(True);
IsNil = ^p.(p ^x.(^y.(False)));
Head = Fst;
Tail = Snd;
FoldR = ^f.(^z.(^l.(If (IsNil l) z (f (Head l) (FoldR f z (Tail l))))));
FoldL = ^f.(^z.(^l.(If (IsNil l) z (FoldL f (f z (Head l)) (Tail l)))));
Comp = ^f.(^g.(^x.(f (g x))));
Map = ^f.(FoldR (Comp Cons f) Nil);
# Sum = FoldR Add 0;
# Length = FoldR ^n.(^z.(Succ z)) 0;
# Take = ^n.(^l.(Or (IsNil l) (IsZero n) Nil (Cons (Head l) (Take (Pred n) (Take l)))));
All = ^f.(FoldR (Comp And f) True);
Any = ^f.(FoldR (Comp Or f) False);

Filter = ^f.(^l.(
    If (IsNil l)
        Nil
        (If (f (Head l))
            (Cons (Head l) (Filter f (Tail l)))
            (Filter f (Tail l))
        )
    ));
