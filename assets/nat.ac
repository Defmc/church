Y = ^f.(^x.(f (x x)) ^x.(f (x x))) # recursive combinator: Y f = Y (f (f (f (...))))
I = ^x.(x) # identity function: I x = x
True = ^a.(^b.(a))
False = ^a.(^b.(b))
If = I # (if c, then i, else e) == c
And = ^a.(^b.(a b a)) 
Or = ^a.(^b.(a a b))
Not = ^a.(a False True)
Xor = ^a.(^b.(a (Not b) b))
Xnor = ^a.(^b.(a b (Not b)))

Succ = λn.(λf.(λx.(f (n f x)))) 
Pred = λx.(λy.(λz.(((x (λp.(λq.(q (p y))))) (λy.(z))) ^x.(x))))
Add = λm.(λn.(λf.(λx.(m f (n f x)))))
Mult = λm.(λn.(λf.(m (n f))))
Pow = λb.(λe.(e b))
Monus = λm.(λn.(n Pred m))
IsZero = λn.(n (λx.(False)) True)
Equal = λa.(λb.(And (IsZero Monus(a b)) (IsZero Monus(b a))))
Leq = λa.(λb.(IsZero (Monus a b)))
Geq = λa.(λb.(IsZero (Monus b a)))

0 = λa.(λb.(b))
1 = λa.(λb.(a b))
