use crate::parser::Token;
use crate::{UBody, UTerm, Ast};
grammar;

pub Program: Ast = {
    <mut v:(<ProgramAtom> "\n")*> <last:ProgramAtom> "\n"? => {
        v.push(last);
        Ast::Program(v)
    }
}

pub ProgramAtom: Ast = {
    Assign => <>,
}

Assign: Ast = {
    <i:Ident> <args:Ident*> "=" <e:Expr> => {
        let mut e = e;
        for arg in args {
            e = UBody::Abs(arg, e).into();
        }
        Ast::Assign(i, e)
    },
}

pub Expr: UTerm = {
    AtomExpr => <>,
    <e:Expr> <atom:AtomExpr> => UBody::App(e, atom).into()
}

AtomExpr: UTerm = {
    LambdaAbs => <>,
    Ident => UBody::Var(<>).into(),
    "(" <e:Expr> ")" => e,
}

LambdaAbs: UTerm = LambdaSym <i:Ident> DotSym "(" <e:Expr> ")" => UBody::Abs(i, e).into();

extern {
    type Location = usize;
    type Error = ();
    
    enum Token {
        LambdaSym => Token::Lambda,
        DotSym => Token::Dot,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
        "=" => Token::Assign,
        "\t" => Token::Tab,
        "\n" => Token::NewLine,
        Ident => Token::Ident(<String>)
    }
}
