use crate::cci::Ast;
use crate::cci::ubody::UnprocessedBody;

grammar;

pub Program: Box<Ast> = {
    App,
    LetExpr,
};

pub LetExpr: Box<Ast> = {
    <id:Ident> "=" <e:App> => Ast::LetExpr(id, e.into_ubody()).into()
};

pub Expr: Box<Ast> = {
    "(" <App> ")",
    Abs,
    Ident => Ast::Expr(UnprocessedBody::Var(<>).into()).into()
};

pub Abs: Box<Ast> = {
    AbsPrefix <id:Ident> AbsBody "(" <a:App> ")" => Ast::Expr(UnprocessedBody::Abs(id, a.into_ubody()).into()).into()
};

pub App: Box<Ast> = {
    <a:App> <e:Expr> => Ast::Expr(UnprocessedBody::App(a.into_ubody(), e.into_ubody()).into()).into(),
    Expr,
};

pub Ident: String = r"[a-zA-Z_]\w*" => <>.to_string();

pub AbsPrefix: () = r"[Î»|\^|\\]" => ();

pub AbsBody: () = r"\.|(->)" => ();
