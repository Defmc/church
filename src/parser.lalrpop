use crate::cci::Ast;
use crate::cci::ubody::UnprocessedBody;

grammar;

InstSeq: Vec<Box<Ast>> = {
    <mut v:(<ProgramAtom> "\n(?!\t)")*> <e:ProgramAtom?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

pub Program: Box<Ast> = InstSeq => Ast::Program(<>).into();

ProgramAtom: Box<Ast> = {
    LetExpr,
    App,
};

LetExpr: Box<Ast> = {
    <id:Ident> "=" <e:App> => Ast::LetExpr(id, e.into_ubody()).into()
};

Expr: Box<Ast> = {
    "(" <App> ")",
    Abs,
    Ident => Ast::Expr(UnprocessedBody::Var(<>).into()).into()
};

Abs: Box<Ast> = {
    AbsPrefix <id:Ident> AbsBody "(" <a:App> ")" => Ast::Expr(UnprocessedBody::Abs(id, a.into_ubody()).into()).into()
};

App: Box<Ast> = {
    <a:App> <e:Expr> => Ast::Expr(UnprocessedBody::App(a.into_ubody(), e.into_ubody()).into()).into(),
    Expr,
};

Ident: String = r"[a-zA-Z_]\w*" => <>.to_string();

AbsPrefix: () = r"[Î»|\^|\\]" => ();

AbsBody: () = r"\.|(->)" => ();
